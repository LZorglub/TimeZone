<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# 
string filename = this.Host.ResolvePath("data\\zone1970.tab"); 
var properties = File.ReadLines(filename); 
List<string> zones = new List<string>();
foreach (string line in properties) { 
	var items = GetFields(line, 4); 
	if (items != null && items.Count >= 3) {
		zones.Add(items[2]);
	}
}

zones.Sort();
List<Regions> regions = new List<Regions>();

for(int i=0; i < zones.Count; i++) {
	List<Regions> node = regions;
	var elements = zones[i].Split(new char[] { '/' });
	for(int j=0; j < elements.Length; j++) {
		Regions r = node.FirstOrDefault(e => e.RegionName == elements[j]);
		if (r == null) {
			r = new Regions();
			r.RegionName = elements[j];
			r.FullName = zones[i];
			node.Add(r); 
		} 
		node = r.Childs;
	}
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code has been generated by T4 Text Template.
//     Generated date : <#= DateTime.Now #>
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;

namespace Afk.ZoneInfo {

	/// <summary>
	/// Enumerates all time zone
	/// </summary>
	public sealed class Zones {
		/// <summary>
		/// Initiliaze a new instance of <see cref="Zones"/>
		/// </summary>
		private Zones() { }

<#
foreach(Regions rg in regions) {
	OutputRegion(rg, 1);
}
#>
	}
}

<#+
public static List<string> GetFields(string line, int count) {
			if (string.IsNullOrEmpty(line)) return null;

			List<string> nsubs = new List<string>();
			StringBuilder sb = new StringBuilder();
			int index = 0; int startIndex = 0;

			do {
				while (index < line.Length && char.IsWhiteSpace(line[index]))
					index++;

				if (index >= line.Length || line[index] == '#')
					break;

				if (count > 0 && nsubs.Count + 1 == count) {
					nsubs.Add(line.Substring(index));
					break;
				}

				startIndex = index;
				do {
					if (line[index++] == '"') {
						do {
							if (index >= line.Length)
								throw new Exception("Odd number of quotation marks");
						} while (line[index++] != '"');
					}
				} while (index < line.Length && !char.IsWhiteSpace(line[index]) && line[index] != '#');

				if (index != startIndex)
					nsubs.Add(line.Substring(startIndex, (index - startIndex)));
			} while (true);

			return nsubs;
		}
#>

<#+
public class Regions {
	public string RegionName;
	public string FullName;
	public List<Regions> Childs = new List<Regions>();
}

public void OutputRegion(Regions region, int level) {
this.WriteLine(new string('\t',1+level) + "/// <summary>");
this.WriteLine(new string('\t',1+level) + "/// Represents all timezones for " + region.RegionName);
this.WriteLine(new string('\t',1+level) + "/// </summary>");
this.WriteLine(new string('\t',1+level) + "public sealed class " + region.RegionName.Replace('-', '_') + " {");
this.WriteLine(new string('\t',2+level) + "/// <summary>");
this.WriteLine(new string('\t',2+level) + "/// Initiliaze a new instance of <see cref=\"" + region.RegionName + "\"/>");
this.WriteLine(new string('\t',2+level) + "/// </summary>");
this.WriteLine(new string('\t',2+level) + "private " + region.RegionName.Replace('-', '_') + "() { }");
this.WriteLine("");

foreach(Regions child in region.Childs) {
	if (child.Childs.Count > 0) OutputRegion(child, level + 1);
	else {
		this.WriteLine(new string('\t',2+level) + "/// <summary>");
		this.WriteLine(new string('\t',2+level) + "/// Gets the timezone for " + child.FullName);
		this.WriteLine(new string('\t',2+level) + "/// </summary>");
		this.WriteLine(new string('\t',2+level) + "public static TzTimeZone " + child.RegionName.Replace('-', '_') + " { get { return TzTimeInfo.GetZone(\"" + child.FullName + "\"); } }");
	}
}
this.WriteLine(new string('\t',1+level) + "}");

}
#>
